/**
 * CLI do SugarCSS
 *
 * Esta CLI permite aos usu√°rios instalar componentes React com SASS em seus projetos.
 * Usa commander para gerenciar os comandos e @inquirer/prompts para interatividade.
 *
 * Nota: O shebang (#!/usr/bin/env node) √© adicionado automaticamente pelo npm
 * quando o pacote √© instalado e o bin √© configurado no package.json.
 */

import { confirm, input, select } from "@inquirer/prompts"; // Prompts interativos para CLI
import path from "node:path"; // Manipula√ß√£o de caminhos de arquivos
import { fileURLToPath } from "node:url"; // Converter URLs para caminhos de sistema de arquivos
// Importa√ß√µes necess√°rias
import { Command } from "commander"; // Biblioteca para criar interfaces de linha de comando
import fs from "fs-extra"; // Extens√£o do fs nativo com m√©todos adicionais

// Inicializa√ß√£o do Commander
const program = new Command();

// Obten√ß√£o do caminho do diret√≥rio atual (importante para ESM)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o b√°sica do programa CLI
program
	.name("porto-ocean") // Nome do comando
	.description(
		"Instala componentes React com Sass do @porto/js-library-corp-hubv-porto-ocean",
	) // Descri√ß√£o exibida na ajuda
	.version("0.1.0"); // Vers√£o da CLI

/**
 * Comando de instala√ß√£o
 *
 * Este √© o comando principal da CLI, respons√°vel por instalar componentes.
 * Suporta tanto modo interativo quanto instala√ß√£o direta via argumentos.
 */
program
	.command("install") // Define o comando 'install'
	.argument("[component]", "Nome do componente para instalar (opcional)") // Argumento opcional entre colchetes
	.option(
		"-d, --dir <directory>", // Op√ß√£o para especificar diret√≥rio de destino
		"Diret√≥rio de destino para instalar o componente",
		"", // Valor padr√£o vazio
	)
	.action(async (componentArg, options) => {
		// Fun√ß√£o executada quando o comando √© chamado
		// Lista de todos os componentes planejados para a biblioteca
		// Esta lista √© usada tanto para valida√ß√£o quanto para exibi√ß√£o na interface interativa
		const available = [
			"button",
			"input",
			"modal",
			"dropdown",
			"textarea",
			"typography",
			"accordion",
			"tabs",
			"link",
			"chip",
		];

		// Componentes que j√° foram implementados e est√£o prontos para uso
		// Apenas estes componentes podem ser instalados pelos usu√°rios
		const implemented = ["button", "chip"];

		/**
		 * Sele√ß√£o interativa de componente
		 *
		 * Se o usu√°rio n√£o especificar um componente como argumento,
		 * apresentamos uma interface interativa para escolha.
		 */
		let component = componentArg;
		if (!component) {
			// Preparar as op√ß√µes para o prompt de sele√ß√£o
			// Para cada componente, criamos um objeto com:
			// - name: Nome exibido (com indicador "em breve" para n√£o implementados)
			// - value: Valor retornado quando selecionado
			// - disabled: Impede sele√ß√£o de componentes n√£o implementados
			const availableChoices = available.map((comp) => ({
				name: `${comp}${implemented.includes(comp) ? "" : " (em breve)"}`,
				value: comp,
				disabled: !implemented.includes(comp),
			}));

			// Exibir prompt de sele√ß√£o e aguardar escolha do usu√°rio
			component = await select({
				message: "Selecione o componente que deseja instalar:",
				choices: availableChoices,
			});
		}

		/**
		 * Valida√ß√£o do componente selecionado
		 *
		 * Mesmo com a interface interativa, ainda precisamos validar o componente
		 * para o caso de o usu√°rio especificar diretamente via argumento.
		 */
		// Verificar se o componente existe na lista de componentes planejados
		if (!available.includes(component)) {
			console.error(`Componente "${component}" n√£o encontrado.`);
			process.exit(1); // Encerra o programa com c√≥digo de erro
		}

		// Verificar se o componente j√° foi implementado
		if (!implemented.includes(component)) {
			console.error(`Componente "${component}" ainda n√£o foi implementado.`);
			process.exit(1); // Encerra o programa com c√≥digo de erro
		}

		/**
		 * Sele√ß√£o do diret√≥rio de destino
		 *
		 * Se o usu√°rio n√£o especificar um diret√≥rio via op√ß√£o --dir,
		 * perguntamos interativamente onde instalar o componente.
		 */
		let baseDir = options.dir;
		if (!baseDir) {
			// Primeiro, perguntamos se o usu√°rio quer usar o diret√≥rio atual
			const useCurrentDir = await confirm({
				message: "Deseja instalar no diret√≥rio atual?",
				default: true, // Por padr√£o, sugerimos usar o diret√≥rio atual
			});

			if (useCurrentDir) {
				// Se sim, usamos o diret√≥rio de trabalho atual
				baseDir = process.cwd();
			} else {
				// Se n√£o, pedimos para digitar um caminho personalizado
				baseDir = await input({
					message: "Digite o caminho do diret√≥rio de destino:",
					default: process.cwd(), // Sugerimos o diret√≥rio atual como padr√£o
				});
			}
		}

		/**
		 * C√°lculo dos caminhos de origem e destino
		 *
		 * Precisamos determinar de onde copiar os arquivos do componente
		 * e para onde copi√°-los no projeto do usu√°rio.
		 */
		// Caminho para a raiz do pacote instalado
		const pkgPath = path.dirname(path.dirname(__dirname));

		// Caminho de origem: onde o componente est√° no pacote
		// Usamos a estrutura src/components/{nome-do-componente}
		const src = path.join(pkgPath, `src/components/${component}`);

		// Caminho de destino: onde o componente ser√° instalado no projeto do usu√°rio
		// Seguimos a conven√ß√£o src/components/ui/{nome-do-componente}
		const dest = path.join(baseDir, `src/components/ui/${component}`);

		/**
		 * Confirma√ß√£o final antes da instala√ß√£o
		 *
		 * Pedimos confirma√ß√£o ao usu√°rio antes de prosseguir com a instala√ß√£o,
		 * mostrando exatamente o que ser√° feito.
		 */
		const confirmInstall = await confirm({
			message: `Confirma a instala√ß√£o do componente "${component}" em ${dest}?`,
			default: true, // Por padr√£o, sugerimos confirmar
		});

		// Se o usu√°rio cancelar, encerramos o programa sem erro
		if (!confirmInstall) {
			console.log("Instala√ß√£o cancelada.");
			process.exit(0); // C√≥digo 0 indica sa√≠da sem erro
		}

		/**
		 * Execu√ß√£o da instala√ß√£o
		 *
		 * Criamos o diret√≥rio de destino (se n√£o existir) e
		 * copiamos todos os arquivos do componente.
		 */
		// Garantir que o diret√≥rio de destino exista
		await fs.ensureDir(dest);

		// Copiar todos os arquivos do componente para o destino
		// fs-extra.copy copia recursivamente todos os arquivos e subdiret√≥rios
		await fs.copy(src, dest);

		// Exibir mensagem de sucesso
		console.log(
			`‚úÖ Componente "${component}" instalado em src/components/ui/${component}`,
		);
	});

/**
 * Comando de listagem
 *
 * Este comando exibe todos os componentes dispon√≠veis e seu status,
 * oferecendo uma vis√£o r√°pida do que est√° dispon√≠vel na biblioteca.
 */
program
	.command("list") // Define o comando 'list'
	.description("Lista todos os componentes dispon√≠veis") // Descri√ß√£o exibida na ajuda
	.action(() => {
		// Fun√ß√£o executada quando o comando √© chamado
		// Usamos as mesmas listas de componentes do comando install
		// para manter consist√™ncia
		const available = [
			"button",
			"input",
			"modal",
			"dropdown",
			"textarea",
			"typography",
			"accordion",
			"tabs",
			"link",
		];

		const implemented = ["button", "input"];

		// Exibir cabe√ßalho da lista
		console.log("\nComponentes dispon√≠veis:");
		console.log("----------------------\n");

		// Iterar sobre todos os componentes e exibir seu status
		// Usamos for...of em vez de forEach por quest√µes de performance e estilo
		for (const comp of available) {
			// Determinar o status do componente (dispon√≠vel ou em breve)
			const status = implemented.includes(comp)
				? "‚úÖ Dispon√≠vel"
				: "üîÑ Em breve";
			// padEnd garante alinhamento uniforme na sa√≠da do terminal
			console.log(`${comp.padEnd(15)} ${status}`);
		}

		// Exibir instru√ß√µes de uso ap√≥s a lista
		console.log("\nPara instalar um componente, execute:");
		console.log("  npx porto-ocean install <componente>");
		console.log("  ou simplesmente:");
		console.log("  npx porto-ocean install\n");
	});

/**
 * Iniciar o processamento dos argumentos da linha de comando
 *
 * Este comando analisa os argumentos passados pelo usu√°rio e
 * executa o comando apropriado com suas op√ß√µes e argumentos.
 */
program.parse();
