import React from 'react';
import { render, screen } from '@testing-library/react';
import { Notification } from './index';

// Mock do m√≥dulo de estilos
jest.mock('./styles.scss', () => ({}));

describe('Notification', () => {
  // Dados de teste padr√£o
  const defaultProps = {
    title: 'T√≠tulo da notifica√ß√£o',
    description: 'Descri√ß√£o da notifica√ß√£o',
    icon: <span data-testid="mock-icon">üîî</span>,
  };

  it('deve renderizar corretamente com valores padr√£o', () => {
    render(<Notification {...defaultProps} data-testid="notification" />);
    
    const notification = screen.getByTestId('notification');
    expect(notification).toBeInTheDocument();
    expect(notification).toHaveClass('notification__root');
    expect(notification).toHaveClass('--default'); // Variante padr√£o
    
    // Verificar se o √≠cone foi renderizado
    const icon = screen.getByTestId('mock-icon');
    expect(icon).toBeInTheDocument();
    expect(icon.parentElement).toHaveClass('notification__icon');
    
    // Verificar se o t√≠tulo foi renderizado
    const title = screen.getByText('T√≠tulo da notifica√ß√£o');
    expect(title).toBeInTheDocument();
    expect(title).toHaveClass('notification__title');
    
    // Verificar se a descri√ß√£o foi renderizada
    const description = screen.getByText('Descri√ß√£o da notifica√ß√£o');
    expect(description).toBeInTheDocument();
    expect(description).toHaveClass('notification__description');
    
    // Verificar se o link n√£o foi renderizado (pois n√£o foi fornecido)
    const link = screen.queryByRole('link');
    expect(link).not.toBeInTheDocument();
  });

  it('deve renderizar com variante outlined', () => {
    render(
      <Notification 
        {...defaultProps} 
        variant="outlined" 
        data-testid="notification" 
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveClass('--outlined');
    expect(notification).not.toHaveClass('--default');
  });

  it('deve renderizar com variante information', () => {
    render(
      <Notification 
        {...defaultProps} 
        variant="information" 
        data-testid="notification" 
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveClass('--information');
  });

  it('deve renderizar com variante attention', () => {
    render(
      <Notification 
        {...defaultProps} 
        variant="attention" 
        data-testid="notification" 
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveClass('--attention');
  });

  it('deve renderizar com variante success', () => {
    render(
      <Notification 
        {...defaultProps} 
        variant="success" 
        data-testid="notification" 
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveClass('--success');
  });

  it('deve renderizar com variante error', () => {
    render(
      <Notification 
        {...defaultProps} 
        variant="error" 
        data-testid="notification" 
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveClass('--error');
  });

  it('deve renderizar com link quando fornecido', () => {
    const link = {
      label: 'Saiba mais',
      href: 'https://exemplo.com'
    };
    
    render(
      <Notification 
        {...defaultProps} 
        link={link}
        data-testid="notification" 
      />
    );
    
    const linkElement = screen.getByText('Saiba mais');
    expect(linkElement).toBeInTheDocument();
    expect(linkElement).toHaveClass('notification__link');
    expect(linkElement).toHaveAttribute('href', 'https://exemplo.com');
  });

  it('n√£o deve renderizar link quando label n√£o √© fornecido', () => {
    const link = {
      label: '',
      href: 'https://exemplo.com'
    };
    
    render(
      <Notification 
        {...defaultProps} 
        link={link}
        data-testid="notification" 
      />
    );
    
    const linkElement = screen.queryByRole('link');
    expect(linkElement).not.toBeInTheDocument();
  });

  it('deve aplicar classes CSS adicionais', () => {
    render(
      <Notification 
        {...defaultProps} 
        className="custom-class"
        data-testid="notification" 
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveClass('custom-class');
    expect(notification).toHaveClass('notification__root');
  });

  it('deve passar atributos HTML adicionais para o elemento raiz', () => {
    render(
      <Notification 
        {...defaultProps}
        data-testid="notification"
        aria-label="Notifica√ß√£o importante"
        role="alert"
      />
    );
    
    const notification = screen.getByTestId('notification');
    expect(notification).toHaveAttribute('aria-label', 'Notifica√ß√£o importante');
    expect(notification).toHaveAttribute('role', 'alert');
  });

  it('deve renderizar com √≠cone SVG', () => {
    const svgIcon = (
      <svg data-testid="svg-icon" width="24" height="24" viewBox="0 0 24 24">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z" />
      </svg>
    );
    
    render(
      <Notification 
        title="Notifica√ß√£o com SVG"
        description="Esta notifica√ß√£o usa um √≠cone SVG"
        icon={svgIcon}
        data-testid="notification" 
      />
    );
    
    const icon = screen.getByTestId('svg-icon');
    expect(icon).toBeInTheDocument();
    expect(icon.parentElement).toHaveClass('notification__icon');
  });

  it('deve renderizar com descri√ß√£o longa', () => {
    const longDescription = 'Esta √© uma descri√ß√£o muito longa para testar como o componente lida com textos extensos que podem quebrar em m√∫ltiplas linhas e afetar o layout da notifica√ß√£o.';
    
    render(
      <Notification 
        title="Notifica√ß√£o com descri√ß√£o longa"
        description={longDescription}
        icon={<span>üîî</span>}
        data-testid="notification" 
      />
    );
    
    const description = screen.getByText(longDescription);
    expect(description).toBeInTheDocument();
    expect(description).toHaveClass('notification__description');
  });
});
