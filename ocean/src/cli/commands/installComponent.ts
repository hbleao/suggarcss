import path from "node:path";
import fs from "fs-extra";
import { input, confirm, select } from "@inquirer/prompts";
// Importa√ß√µes das fun√ß√µes utilit√°rias
// Definindo tipos para as fun√ß√µes que ser√£o importadas
type ComponentListFunction = () => string[];

// Importa√ß√µes das fun√ß√µes utilit√°rias
// Nota: O arquivo utils.ts deve existir no mesmo diret√≥rio que este arquivo
declare const getAvailableComponents: ComponentListFunction;
declare const getImplementedComponents: ComponentListFunction;

// Importa√ß√£o din√¢mica para evitar erros de TypeScript durante o build
// As fun√ß√µes reais ser√£o importadas em tempo de execu√ß√£o
let utils: {
	getAvailableComponents: ComponentListFunction;
	getImplementedComponents: ComponentListFunction;
};

try {
	// eslint-disable-next-line @typescript-eslint/no-var-requires
	utils = require("../utils");
} catch (error) {
	// Fallback para caso o m√≥dulo n√£o seja encontrado
	utils = {
		getAvailableComponents: () => [],
		getImplementedComponents: () => [],
	};
}

/**
 * Instala um componente espec√≠fico no diret√≥rio de destino
 * @param componentName Nome do componente a ser instalado
 * @param destDir Diret√≥rio de destino para instala√ß√£o
 */
export async function installComponent(
	componentName: string,
	initialDestDir?: string
): Promise<void> {
	let destDir = initialDestDir;
	const available = utils.getAvailableComponents();
	const implemented = utils.getImplementedComponents();

	// Validar se o componente existe e est√° implementado
	if (!available.includes(componentName)) {
		console.error(`\n‚ùå Erro: Componente "${componentName}" n√£o encontrado.`);
		process.exit(1);
	}

	if (!implemented.includes(componentName)) {
		console.error(`\n‚ùå Erro: Componente "${componentName}" ainda n√£o est√° implementado.`);
		process.exit(1);
	}

	// Se o diret√≥rio de destino n√£o foi especificado, perguntar ao usu√°rio
	if (!destDir) {
		destDir = await input({
			message: "Digite o caminho para o diret√≥rio onde deseja instalar o componente:",
			default: "src/components", // Sugest√£o de diret√≥rio padr√£o
		});
	}

	// Confirma√ß√£o antes da instala√ß√£o (pular se o diret√≥rio foi fornecido como par√¢metro)
	let confirmInstall = true;

	// Se o diret√≥rio n√£o foi fornecido como par√¢metro inicial, pedir confirma√ß√£o
	if (destDir !== initialDestDir) {
		confirmInstall = await confirm({
			message: `Confirma a instala√ß√£o do componente ${componentName} em ${path.resolve(process.cwd(), destDir)}?`,
			default: true,
		});
	} else {
		console.log(
			`\nüì¶ Instalando componente ${componentName} em ${path.resolve(process.cwd(), destDir)}...\n`
		);
	}

	if (!confirmInstall) {
		console.log("\n‚ö†Ô∏è Instala√ß√£o cancelada pelo usu√°rio.\n");
		process.exit(0);
	}

	try {
		// Poss√≠veis caminhos do componente
		const possiblePaths = [
			// Caminhos relativos ao diret√≥rio atual
			path.join(process.cwd(), `src/components/${componentName}`),
			path.join(process.cwd(), `dist/components/${componentName}`),
			// Caminhos absolutos para o caso de estarmos em um diret√≥rio diferente
			path.join("/Users/henrique/dev/sugarcss/src/components/", componentName),
			path.join("/Users/henrique/dev/sugarcss/dist/components/", componentName),
			// Caminhos relativos ao diret√≥rio do pacote
			path.join(path.dirname(path.dirname(__dirname)), `dist/components/${componentName}`),
			path.join(path.dirname(path.dirname(__dirname)), `src/components/${componentName}`)
		]

		// Encontrar o caminho do componente
		let src = "";
		for (const possiblePath of possiblePaths) {
			if (fs.existsSync(possiblePath)) {
				src = possiblePath;
				console.log(`‚úÖ Componente encontrado em: ${src}`);
				break;
			}
		}

		// Imprimir caminhos verificados para debug se o componente n√£o for encontrado
		if (!src) {
			console.log("Caminhos verificados:", possiblePaths);
		}

		if (!src) {
			console.error(`‚ùå Componente ${componentName} n√£o encontrado.`);
			process.exit(1);
		}

		// Destino para o componente
		const dest = path.join(path.resolve(process.cwd(), destDir), componentName);

		// Criar diret√≥rio de destino se n√£o existir
		fs.ensureDirSync(dest);

		// Copiar arquivos
		fs.copySync(src, dest);

		console.log(`\n‚úÖ Componente ${componentName} instalado com sucesso em ${dest}!\n`);
	} catch (error) {
		console.error(`\n‚ùå Erro ao instalar o componente ${componentName}:`, error);
		process.exit(1);
	}
}

/**
 * Instala todos os componentes implementados no diret√≥rio de destino
 * @param destDir Diret√≥rio de destino para instala√ß√£o
 */
export async function installAllComponents(initialDestDir?: string): Promise<void> {
	let destDir = initialDestDir;
	const implemented = utils.getImplementedComponents();

	if (implemented.length === 0) {
		console.error("\n‚ùå Erro: Nenhum componente implementado encontrado.");
		process.exit(1);
	}

	// Se o diret√≥rio de destino n√£o foi especificado, perguntar ao usu√°rio
	if (!destDir) {
		destDir = await input({
			message: "Digite o caminho para o diret√≥rio onde deseja instalar os componentes:",
			default: "src/components", // Sugest√£o de diret√≥rio padr√£o
		});
	}

	// Confirma√ß√£o antes da instala√ß√£o (pular se o diret√≥rio foi fornecido como par√¢metro)
	let confirmInstall = true;

	// Se o diret√≥rio n√£o foi fornecido como par√¢metro inicial, pedir confirma√ß√£o
	if (destDir !== initialDestDir) {
		confirmInstall = await confirm({
			message: `Confirma a instala√ß√£o de todos os ${implemented.length} componentes implementados em ${path.resolve(process.cwd(), destDir)}?`,
			default: true,
		});
	} else {
		console.log(
			`\nüì¶ Instalando todos os ${implemented.length} componentes implementados em ${path.resolve(process.cwd(), destDir)}...\n`
		);
	}

	if (!confirmInstall) {
		console.log("\n‚ö†Ô∏è Instala√ß√£o cancelada pelo usu√°rio.\n");
		process.exit(0);
	}

	console.log("\nüîÑ Instalando todos os componentes implementados...\n");

	// Instalar cada componente implementado
	let successCount = 0;
	let failCount = 0;

	for (const component of implemented) {
		try {
			await installComponent(component, destDir);
			successCount++;
		} catch (error) {
			console.error(`\n‚ùå Erro ao instalar o componente ${component}:`, error);
			failCount++;
		}
	}

	console.log(`\nüìä Resumo da instala√ß√£o:`);
	console.log(`‚úÖ ${successCount} componentes instalados com sucesso`);
	if (failCount > 0) {
		console.log(`‚ùå ${failCount} componentes falharam na instala√ß√£o`);
	}

	if (successCount > 0) {
		console.log(`\n‚úÖ Instala√ß√£o conclu√≠da!\n`);
	} else {
		console.error(`\n‚ùå Nenhum componente foi instalado com sucesso.\n`);
		process.exit(1);
	}
}

/**
 * Fun√ß√£o principal para o comando de instala√ß√£o de componentes
 * Permite instala√ß√£o interativa ou direta de componentes
 */
interface InstallOptions {
	dir?: string;
	component?: string;
	allComponents?: boolean;
}

/**
 * Fun√ß√£o principal para o comando de instala√ß√£o de componentes
 * Permite instala√ß√£o interativa ou direta de componentes
 * @param componentName Nome do componente a ser instalado (opcional)
 * @param options Op√ß√µes de instala√ß√£o
 */
export async function handleComponentInstallation(
	componentName?: string,
	options?: InstallOptions
): Promise<void> {
	// Se a op√ß√£o --all-components foi especificada, instalar todos os componentes
	if (options?.allComponents) {
		return installAllComponents(options?.dir);
	}

	// Se um componente espec√≠fico foi especificado, instalar esse componente
	if (componentName || options?.component) {
		const component = componentName || options?.component || "";
		if (!component) {
			console.error("\n‚ùå Erro: Nome do componente n√£o especificado.\n");
			process.exit(1);
		}
		return installComponent(component, options?.dir);
	}

	// Caso contr√°rio, mostrar lista interativa de componentes
	const available = utils.getAvailableComponents();
	const implemented = utils.getImplementedComponents();

	if (available.length === 0) {
		console.error("\n‚ùå Erro: Nenhum componente dispon√≠vel encontrado.");
		process.exit(1);
	}

	console.log("\nüìã Componentes dispon√≠veis:\n");

	// Marcar componentes implementados com um ‚úÖ
	const choices = available.map((comp: string) => ({
		name: `${comp} ${implemented.includes(comp) ? "‚úÖ" : "‚ö†Ô∏è"}`,
		value: comp,
		disabled: !implemented.includes(comp),
	}));

	const selectedComponent = await select({
		message: "Selecione um componente para instalar (‚úÖ = implementado, ‚ö†Ô∏è = em desenvolvimento):",
		choices,
	});

	// O valor retornado pelo select √© garantido como string neste contexto
	return installComponent(selectedComponent as string, options?.dir);
}
